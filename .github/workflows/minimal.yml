name: Minimal Working Build

on:
  workflow_dispatch:
  push:
    branches: [main, master, feat/*, minimal-*]

jobs:
  linux-cli:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install basic dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
    
    - name: Build CLI only
      run: |
        cmake -B build -DBUILD_GUI=OFF -DCMAKE_BUILD_TYPE=Release
        cmake --build build
    
    - name: Test CLI
      run: |
        ls -la build/
        if [ -f "build/RTEgetData" ]; then echo "CLI executable built successfully"; else exit 1; fi
    
    - name: Upload CLI
      uses: actions/upload-artifact@v4
      with:
        name: RTEgetData-Linux-CLI
        path: build/RTEgetData
        retention-days: 7

  windows-cli:
    runs-on: windows-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Build CLI only
      run: |
        cmake -B build -DBUILD_GUI=OFF
        cmake --build build --config Release
    
    - name: Test CLI
      run: |
        dir build\Release\
        if (Test-Path "build\Release\RTEgetData.exe") { echo "CLI executable built successfully" } else { exit 1 }
    
    - name: Upload CLI
      uses: actions/upload-artifact@v4
      with:
        name: RTEgetData-Windows-CLI
        path: build/Release/RTEgetData.exe
        retention-days: 7

  linux-gui:
    runs-on: ubuntu-latest
    needs: linux-cli  # Only run if CLI works
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install GUI dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libgl1-mesa-dev \
          libx11-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev
    
    - name: Build with GUI
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_GUI=ON \
          -DGUI_USE_SDL2=ON \
          -DGUI_STATIC_LINK=ON
        cmake --build build --parallel
    
    - name: Test GUI build
      run: |
        ls -la build/
        echo "CLI size: $(stat -c%s build/RTEgetData) bytes"
        echo "GUI size: $(stat -c%s build/RTEgetData-GUI) bytes"
    
    - name: Upload Linux binaries
      uses: actions/upload-artifact@v4
      with:
        name: RTEgetData-Linux-Full
        path: |
          build/RTEgetData
          build/RTEgetData-GUI
        retention-days: 7

  windows-gui:
    runs-on: windows-latest
    needs: windows-cli  # Only run if CLI works
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Build with GUI
      run: |
        cmake -B build -DBUILD_GUI=ON -DGUI_USE_SDL2=ON -DGUI_STATIC_LINK=ON
        cmake --build build --config Release --parallel
    
    - name: Test GUI build
      run: |
        dir build\Release\
        if (Test-Path "build\Release\RTEgetData.exe") { echo "CLI executable: $((Get-Item 'build\Release\RTEgetData.exe').Length) bytes" } else { echo "CLI executable not found"; exit 1 }
        if (Test-Path "build\Release\RTEgetData-GUI.exe") { echo "GUI executable: $((Get-Item 'build\Release\RTEgetData-GUI.exe').Length) bytes" } else { echo "GUI executable not found"; exit 1 }
    
    - name: Upload Windows binaries
      uses: actions/upload-artifact@v4
      with:
        name: RTEgetData-Windows-Full
        path: |
          build/Release/RTEgetData.exe
          build/Release/RTEgetData-GUI.exe
        retention-days: 7